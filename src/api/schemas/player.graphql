type Player {
  id: ID!
  player_name: String!
  email: String!
}

type LoginResponse {
  token: String
  message: String!
  player: Player!
}

type PlayerResponse{
  message: String!
  player: Player!

}

input Credentials {
  username: String!
  password: String!
}

input PlayerInput {
  player_name: String!
  email: String!
}

input GameInput {
  player1: ID!
  player2: ID!
  score1: Int!
  score2: Int!
}

input PlayerModify {
  player_name: String
  email: String
  password: String
}

type Query {
  players: [Player]
  playerById(id: ID!): Player
  checkToken: PlayerResponse

}

type PlayerDeleteResponse {
  message: String!
  player: Player
}

type Mutation {
  login(credentials: Credentials!): LoginResponse
  register(player: PlayerInput!): PlayerResponse
  updatePlayer(player: PlayerModify!): PlayerResponse
  deletePlayer: PlayerDeleteResponse
  """
  Separate mutations for admin because of rest api
  """
  updatePlayerAsAdmin(player: PlayerModify!, id: ID!): PlayerResponse
  """
  Separate mutations for admin because of rest api
  """
  deletePlayerAsAdmin(id: ID!): PlayerDeleteResponse
}
